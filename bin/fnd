#!/usr/bin/env python3
# This file is placed in the Public Domain.


import sys


sys.path.insert(0, ".")


from opv.objects import format, keys
from opv.storage import Storage
from opv.utility import fntime


def __dir__():
    return (
            "fnd",
           )


__all__ = __dir__()


def elapsed(seconds, short=True):
    txt = ""
    nsec = float(seconds)
    if nsec < 1:
        return f"{nsec:.4f}s"
    year = 365*24*60*60
    week = 7*24*60*60
    nday = 24*60*60
    hour = 60*60
    minute = 60
    years = int(nsec/year)
    nsec -= years*year
    weeks = int(nsec/week)
    nsec -= weeks*week
    nrdays = int(nsec/nday)
    nsec -= nrdays*nday
    hours = int(nsec/hour)
    nsec -= hours*hour
    minutes = int(nsec/minute)
    nsec -= int(minute*minutes)
    sec = int(nsec)
    if years:
        txt += "%sy" % years
    if weeks:
        nrdays += weeks * 7
    if nrdays:
        txt += "%sd" % nrdays
    if years and short and txt:
        return txt.strip()
    if hours:
        txt += "%sh" % hours
    if minutes:
        txt += "%sm" % minutes
    if sec:
        txt += "%ss" % sec
    else:
        txt += "0s"
    txt = txt.strip()
    return txt


def fnd():
    args = sys.argv[1:]
    gets = [x.split("==") for x in args if "==" in x]
    if not args:
        res = ",".join(sorted([x.split(".")[-1].lower() for x in Storage.files()]))
        if res:
            print(res)
        else:
            print("no types yet.")
        return
    otype = args[0]
    nmr = 0
    keyz = None
    if gets:
        keyz = ",".join(keys(gets))
    if len(args) > 1:
        keyz += "," + ",".join(args[1:])
    for path, obj in Storage.find(otype, gets):
        if not keyz:
            keyz = "," + ",".join(keys(obj))
        txt = "%s %s %s" % (
                         str(nmr),
                         format(obj, keyz),
                         elapsed(fntime(path))
                        )
        nmr += 1
        event.reply(txt)
    if not nmr:
        event.reply("no result (%s)" % event.txt)


fnd()
