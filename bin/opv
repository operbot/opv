#!/usr/bin/env python3
# This file is placed in the Public Domain.


"the object programming version"


import os
import sys
import termios
import time
import traceback


sys.path.insert(0, os.getcwd())


from opv.objects import Default, update
from opv.handler import Event, Handler, scan
from opv.modules import cmd, fnd, irc, rss
from opv.storage import Storage


Cfg = Default()
Storage.workdir = os.path.expanduser("~/.opv")


scan(cmd)
scan(fnd)
scan(irc)
scan(rss)


class CLI(Handler):

    def __init__(self):
        Handler.__init__(self)
        self.register("command", self.dispatch)

    def announce(self, txt):
        pass

    def raw(self, txt):
        print(txt)
        sys.stdout.flush()


class Console(CLI):

    def handle(self, event):
        self.dispatch(event)
        #event.wait()

    def poll(self):
        event = Event()
        event.txt = input("> ")
        return event


def waiter():
    got = []
    for ex in Handler.errors:
        traceback.print_exception(type(ex), ex, ex.__traceback__)
        got.append(ex)
    for exc in got:
        Handler.errors.remove(exc)


def wrap(func):
    fds = sys.stdin.fileno()
    gotterm = True
    try:
        old = termios.tcgetattr(fds)
    except termios.error:
        gotterm = False
    try:
        func()
    except (EOFError, KeyboardInterrupt):
        print("")
    finally:
        if gotterm:
            termios.tcsetattr(fds, termios.TCSADRAIN, old)
        waiter()


def main():
    e = Event()
    e.type = "command"
    e.parse(" ".join(sys.argv[1:]))
    if e.txt:
        cli = CLI()
        cli.handle(e)
    elif "c" in e.opts:
        date = time.ctime(time.time()).replace("  ", " ")
        print(f"OPV started {date}")
        irc.init()
        rss.init()
        csl = Console()
        csl.start()


wrap(main)
